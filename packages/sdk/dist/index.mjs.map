{"version":3,"sources":["../src/index.ts"],"names":["MyPriv360","opts","token","epsilon","aggregations","supportedAggregations","invalidAggregations","agg","url","requestBody","response","responseData","error","src_default"],"mappings":"AAiGO,IAAMA,EAAN,KAAgB,CAUrB,YAAYC,EAAwB,CAClC,GAAI,CAACA,EAAK,QACR,MAAM,IAAI,MAAM,qBAAqB,EAEvC,GAAI,CAACA,EAAK,OACR,MAAM,IAAI,MAAM,oBAAoB,EAGtC,KAAK,QAAUA,EAAK,QAAQ,QAAQ,OAAQ,EAAE,EAC9C,KAAK,OAASA,EAAK,MACrB,CAQA,gBAAgBC,EAAqB,CACnC,GAAI,CAACA,EACH,MAAM,IAAI,MAAM,+BAA+B,EAEjD,KAAK,aAAeA,CACtB,CA8BA,MAAM,gBAAgBD,EAAoD,CACxE,GAAI,CAAC,KAAK,aACR,MAAO,CACL,QAAS,GACT,MAAO,uDACP,QAAS,kFACX,EAGF,GAAI,CAACA,EAAK,SACR,MAAO,CACL,QAAS,GACT,MAAO,uBACP,QAAS,iFACX,EAGF,GAAI,CAACA,EAAK,QACR,MAAO,CACL,QAAS,GACT,MAAO,sBACP,QAAS,kEACX,EAGF,IAAME,EAAUF,EAAK,SAAW,EAC1BG,EAAeH,EAAK,cAAgB,CAAC,MAAM,EAGjD,GAAIE,GAAW,GAAKA,EAAU,GAC5B,MAAO,CACL,QAAS,GACT,MAAO,wBACP,QAAS,8FACX,EAIF,IAAME,EAAwB,CAAC,OAAQ,MAAO,QAAS,MAAO,MAAO,QAAQ,EACvEC,EAAsBF,EAAa,OAAOG,GAAO,CAACF,EAAsB,SAASE,CAAG,CAAC,EAC3F,GAAID,EAAoB,OAAS,EAC/B,MAAO,CACL,QAAS,GACT,MAAO,gCACP,QAAS,6BAA6BA,EAAoB,KAAK,IAAI,CAAC,gBAAgBD,EAAsB,KAAK,IAAI,CAAC,EACtH,EAGF,GAAI,CACF,IAAMG,EAAM,GAAG,KAAK,OAAO,iBACrBC,EAAc,CAClB,SAAUR,EAAK,SACf,QAASA,EAAK,QACd,QAASE,EACT,aAAcC,EACd,aAAc,KAAK,YACrB,EAEMM,EAAW,MAAM,MAAMF,EAAK,CAChC,OAAQ,OACR,QAAS,CACP,eAAgB,mBAChB,cAAiB,UAAU,KAAK,MAAM,GACtC,aAAc,qBAChB,EACA,KAAM,KAAK,UAAUC,CAAW,CAClC,CAAC,EAEKE,EAAe,MAAMD,EAAS,KAAK,EAEzC,OAAKA,EAAS,GASTC,EAAa,QAQX,CACL,QAAS,GACT,KAAM,CACJ,QAASA,EAAa,SAAW,CAAC,EAClC,QAASA,EAAa,SAAWR,EACjC,SAAUF,EAAK,SACf,QAASA,EAAK,QACd,UAAWU,EAAa,WAAa,IAAI,KAAK,EAAE,YAAY,EAC5D,YAAaA,EAAa,aAAe,CAC3C,CACF,EAjBS,CACL,QAAS,GACT,MAAOA,EAAa,OAAS,eAC7B,QAASA,EAAa,SAAW,sCACnC,EAbO,CACL,QAAS,GACT,MAAOA,EAAa,OAAS,QAAQD,EAAS,MAAM,KAAKA,EAAS,UAAU,GAC5E,QAASC,EAAa,SAAW,2CACnC,CAwBJ,OAASC,EAAO,CAId,MAAO,CACL,QAAS,GACT,MAAO,iBACP,QAAS,6BALUA,aAAiB,MAAQA,EAAM,QAAU,wBAKV,EACpD,CACF,CACF,CAOA,YAAqB,CACnB,OAAO,KAAK,OACd,CAOA,iBAA2B,CACzB,MAAO,CAAC,CAAC,KAAK,YAChB,CAMA,mBAA0B,CACxB,KAAK,aAAe,MACtB,CACF,EAGOC,EAAQb","sourcesContent":["/**\r\n * MyPriv360 SDK - Privacy-first data platform client\r\n * \r\n * This SDK provides a TypeScript interface for interacting with the MyPriv360 \r\n * privacy-first data platform, enabling differential privacy queries and \r\n * consent management.\r\n */\r\n\r\nexport interface MyPriv360Options {\r\n  /** Base URL of the MyPriv360 API (e.g., 'https://api.mypriv360.com') */\r\n  baseUrl: string;\r\n  /** API key for authentication */\r\n  apiKey: string;\r\n}\r\n\r\nexport interface QueryAnonymizedOptions {\r\n  /** Data category to query (e.g., 'health', 'activity', 'demographics') */\r\n  category: string;\r\n  /** Purpose of the data query (e.g., 'research', 'analytics') */\r\n  purpose: string;\r\n  /** \r\n   * Privacy parameter epsilon (Îµ) for differential privacy.\r\n   * Lower values = more privacy, higher values = more accuracy.\r\n   * Default: 1.0\r\n   */\r\n  epsilon?: number;\r\n  /** \r\n   * Statistical aggregations to perform on the data.\r\n   * Supported: ['mean', 'sum', 'count', 'min', 'max', 'stddev']\r\n   * Default: ['mean']\r\n   */\r\n  aggregations?: string[];\r\n}\r\n\r\nexport interface QueryResult {\r\n  /** Whether the query was successful */\r\n  success: boolean;\r\n  /** Query results data */\r\n  data?: {\r\n    /** Statistical results for each requested aggregation */\r\n    results: Record<string, number>;\r\n    /** Epsilon value used for privacy */\r\n    epsilon: number;\r\n    /** Data category queried */\r\n    category: string;\r\n    /** Query purpose */\r\n    purpose: string;\r\n    /** Timestamp of the query */\r\n    timestamp: string;\r\n    /** Number of records included in the aggregation */\r\n    recordCount: number;\r\n  };\r\n  /** Error message if query failed */\r\n  error?: string;\r\n  /** Detailed error information for debugging */\r\n  details?: string;\r\n}\r\n\r\nexport interface ConsentToken {\r\n  /** The consent token string */\r\n  token: string;\r\n  /** Token expiration timestamp */\r\n  expiresAt: string;\r\n  /** Granted permissions */\r\n  permissions: string[];\r\n}\r\n\r\n/**\r\n * MyPriv360 SDK Client\r\n * \r\n * Provides methods to interact with the MyPriv360 privacy-first data platform,\r\n * including differential privacy queries and consent token management.\r\n * \r\n * @example\r\n * ```typescript\r\n * const client = new MyPriv360({\r\n *   baseUrl: 'https://api.mypriv360.com',\r\n *   apiKey: 'your-api-key'\r\n * });\r\n * \r\n * // Set consent token (obtained from user consent flow)\r\n * client.setConsentToken('consent-token-from-user');\r\n * \r\n * // Query anonymized health data\r\n * const result = await client.queryAnonymized({\r\n *   category: 'health',\r\n *   purpose: 'research',\r\n *   epsilon: 1.0,\r\n *   aggregations: ['mean', 'count']\r\n * });\r\n * \r\n * if (result.success) {\r\n *   console.log('Health data mean:', result.data.results.mean);\r\n *   console.log('Record count:', result.data.results.count);\r\n * }\r\n * ```\r\n */\r\nexport class MyPriv360 {\r\n  private baseUrl: string;\r\n  private apiKey: string;\r\n  private consentToken?: string;\r\n\r\n  /**\r\n   * Creates a new MyPriv360 SDK client instance.\r\n   * \r\n   * @param opts - Configuration options for the client\r\n   */\r\n  constructor(opts: MyPriv360Options) {\r\n    if (!opts.baseUrl) {\r\n      throw new Error('baseUrl is required');\r\n    }\r\n    if (!opts.apiKey) {\r\n      throw new Error('apiKey is required');\r\n    }\r\n\r\n    this.baseUrl = opts.baseUrl.replace(/\\/+$/, ''); // Remove trailing slashes\r\n    this.apiKey = opts.apiKey;\r\n  }\r\n\r\n  /**\r\n   * Sets the consent token for data queries.\r\n   * This token should be obtained from the user's consent flow.\r\n   * \r\n   * @param token - The consent token from the user\r\n   */\r\n  setConsentToken(token: string): void {\r\n    if (!token) {\r\n      throw new Error('Consent token cannot be empty');\r\n    }\r\n    this.consentToken = token;\r\n  }\r\n\r\n  /**\r\n   * Queries anonymized data using differential privacy.\r\n   * \r\n   * This method performs privacy-preserving aggregations on user data\r\n   * by adding statistical noise to protect individual privacy while\r\n   * maintaining data utility for analysis.\r\n   * \r\n   * @param opts - Query configuration options\r\n   * @returns Promise resolving to query results or error information\r\n   * \r\n   * @example\r\n   * ```typescript\r\n   * // Query health data with default epsilon (1.0)\r\n   * const result = await client.queryAnonymized({\r\n   *   category: 'health',\r\n   *   purpose: 'research',\r\n   *   aggregations: ['mean', 'count']\r\n   * });\r\n   * \r\n   * // Query with custom privacy parameter\r\n   * const privateResult = await client.queryAnonymized({\r\n   *   category: 'activity',\r\n   *   purpose: 'analytics', \r\n   *   epsilon: 0.5, // More privacy\r\n   *   aggregations: ['mean', 'stddev']\r\n   * });\r\n   * ```\r\n   */\r\n  async queryAnonymized(opts: QueryAnonymizedOptions): Promise<QueryResult> {\r\n    if (!this.consentToken) {\r\n      return {\r\n        success: false,\r\n        error: 'Consent token not set. Call setConsentToken() first.',\r\n        details: 'A consent token is required for all data queries to ensure user privacy consent.'\r\n      };\r\n    }\r\n\r\n    if (!opts.category) {\r\n      return {\r\n        success: false,\r\n        error: 'category is required',\r\n        details: 'Specify the data category to query (e.g., \"health\", \"activity\", \"demographics\")'\r\n      };\r\n    }\r\n\r\n    if (!opts.purpose) {\r\n      return {\r\n        success: false,\r\n        error: 'purpose is required',\r\n        details: 'Specify the purpose of the query (e.g., \"research\", \"analytics\")'\r\n      };\r\n    }\r\n\r\n    const epsilon = opts.epsilon ?? 1.0;\r\n    const aggregations = opts.aggregations ?? ['mean'];\r\n\r\n    // Validate epsilon value\r\n    if (epsilon <= 0 || epsilon > 10) {\r\n      return {\r\n        success: false,\r\n        error: 'Invalid epsilon value',\r\n        details: 'Epsilon must be between 0 (exclusive) and 10 (inclusive). Lower values provide more privacy.'\r\n      };\r\n    }\r\n\r\n    // Validate aggregations\r\n    const supportedAggregations = ['mean', 'sum', 'count', 'min', 'max', 'stddev'];\r\n    const invalidAggregations = aggregations.filter(agg => !supportedAggregations.includes(agg));\r\n    if (invalidAggregations.length > 0) {\r\n      return {\r\n        success: false,\r\n        error: 'Invalid aggregation functions',\r\n        details: `Unsupported aggregations: ${invalidAggregations.join(', ')}. Supported: ${supportedAggregations.join(', ')}`\r\n      };\r\n    }\r\n\r\n    try {\r\n      const url = `${this.baseUrl}/api/pdp/query`;\r\n      const requestBody = {\r\n        category: opts.category,\r\n        purpose: opts.purpose,\r\n        epsilon: epsilon,\r\n        aggregations: aggregations,\r\n        consentToken: this.consentToken\r\n      };\r\n\r\n      const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n          'User-Agent': 'MyPriv360-SDK/1.0.0'\r\n        },\r\n        body: JSON.stringify(requestBody)\r\n      });\r\n\r\n      const responseData = await response.json();\r\n\r\n      if (!response.ok) {\r\n        return {\r\n          success: false,\r\n          error: responseData.error || `HTTP ${response.status}: ${response.statusText}`,\r\n          details: responseData.details || 'Request failed with no additional details'\r\n        };\r\n      }\r\n\r\n      // Validate response structure\r\n      if (!responseData.success) {\r\n        return {\r\n          success: false,\r\n          error: responseData.error || 'Query failed',\r\n          details: responseData.details || 'No additional error details provided'\r\n        };\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: {\r\n          results: responseData.results || {},\r\n          epsilon: responseData.epsilon || epsilon,\r\n          category: opts.category,\r\n          purpose: opts.purpose,\r\n          timestamp: responseData.timestamp || new Date().toISOString(),\r\n          recordCount: responseData.recordCount || 0\r\n        }\r\n      };\r\n\r\n    } catch (error) {\r\n      // Handle network errors, JSON parsing errors, etc.\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\r\n      \r\n      return {\r\n        success: false,\r\n        error: 'Request failed',\r\n        details: `Network or parsing error: ${errorMessage}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the current base URL configuration.\r\n   * \r\n   * @returns The configured base URL\r\n   */\r\n  getBaseUrl(): string {\r\n    return this.baseUrl;\r\n  }\r\n\r\n  /**\r\n   * Checks if a consent token is currently set.\r\n   * \r\n   * @returns True if consent token is set, false otherwise\r\n   */\r\n  hasConsentToken(): boolean {\r\n    return !!this.consentToken;\r\n  }\r\n\r\n  /**\r\n   * Clears the current consent token.\r\n   * This will require setting a new token before making queries.\r\n   */\r\n  clearConsentToken(): void {\r\n    this.consentToken = undefined;\r\n  }\r\n}\r\n\r\n// Default export\r\nexport default MyPriv360;"]}